{"version":3,"sources":["react component/TransferToken/AssociatedAccounts.js","Components/Form.js","Components/Appbar.js","App.js","reportWebVitals.js","index.js","Components/getAccountInfo.js","Components/ErrorHandling.js","Components/getOrCreateAssociatedAccount.js","Components/connection.js","Components/associatedAccounts.js","Components/externalWallet.js"],"names":["SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","PublicKey","findAssociatedTokenAccountPublicKey","ownerPublicKey","tokenMintPublicKey","a","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","createIx","funderPubkey","associatedTokenAccountPublicKey","TransactionInstruction","programId","data","Buffer","from","keys","pubkey","isSigner","isWritable","SystemProgram","SYSVAR_RENT_PUBKEY","sendTxUsingExternalSignature","instructions","connection","feePayer","signersExceptWallet","wallet","tx","Transaction","add","getRecentBlockhash","recentBlockhash","blockhash","setSigners","publicKey","map","s","forEach","acc","partialSign","window","solana","signTransaction","signedTransaction","sendRawTransaction","serialize","skipPreflight","preflightCommitment","COMMITMENT","signature","console","log","createAssociatedTokenAccount","feePayerSecret","feePayerSignsExternally","tokenMintAddress","ownerAddress","payer","tokenMintPub","payerPub","ix","TransferForm","useState","owner","destination","tokenMint","setPubKey","useEffect","getConnectedWallet","connectWallet","provider","isPhantom","connect","on","open","className","Button","variant","color","onClick","transferTokenHandler","ButtonAppBar","React","setOpen","handleClose","AppBar","position","Toolbar","style","float","Dialog","onClose","maxWidth","fullWidth","DialogTitle","textAlign","DialogContent","DialogActions","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","getAccountInfo","account","accountPub","info","Error","equals","length","AccountLayout","span","getOrCreateAssociatedAccount","mint","pubOwner","pubMint","associatedAddress","Connection","clusterApiUrl","getProvider","write","sleep","ms","Promise","resolve","setTimeout","listTokens","getTokenAccountsByOwner","value","e","accountInfo","SPLToken","decode","fromBuffer","amount","push","toString","main2","catch","error","dest","token","ownerPub","tokenPub","destPub","tokenAssociatedAddress","assOwnerAccount","assDestAccount","Token","createTransferInstruction"],"mappings":"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","file":"static/js/main.a799d037.chunk.js","sourcesContent":["import { PublicKey, TransactionInstruction, SystemProgram, SYSVAR_RENT_PUBKEY, Transaction } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { connection, COMMITMENT } from \"../../Components/connection\";\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n    \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst findAssociatedTokenAccountPublicKey = async(\n    ownerPublicKey,\n    tokenMintPublicKey\n) => \n    (\n    await PublicKey.findProgramAddress(\n      [\n        ownerPublicKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintPublicKey.toBuffer()\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n)[0];\n\nconst createIx = (\n  funderPubkey,\n  associatedTokenAccountPublicKey,\n  ownerPublicKey,\n  tokenMintPublicKey\n) =>\n  new TransactionInstruction({\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n    keys: [\n      { pubkey: funderPubkey, isSigner: true, isWritable: true },\n      {\n        pubkey: associatedTokenAccountPublicKey,\n        isSigner: false,\n        isWritable: true\n      },\n      { pubkey: ownerPublicKey, isSigner: false, isWritable: false },\n      { pubkey: tokenMintPublicKey, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }\n    ]\n  })\n\n\nconst sendTxUsingExternalSignature = async(\n    instructions,\n    connection,\n    feePayer,\n    signersExceptWallet,\n    wallet //this is a public key\n) => {\n\n    let tx = new Transaction();\n    tx.add(...instructions);\n    tx.recentBlockhash = (await connection.getRecentBlockhash(\"max\")).blockhash;\n\n    tx.setSigners(\n            ...(feePayer\n            ? [(feePayer).publicKey, wallet] //change user\n            : [wallet]), //change user\n            ...signersExceptWallet.map(s => s.publicKey)\n    );\n\n    signersExceptWallet.forEach(acc => {\n        tx.partialSign(acc);\n    });\n\n    const signedTransaction = await window.solana.signTransaction(tx);\n\n    //TEST\n    //const signedTransaction = await window.solana.signAllTransaction([tx1, tx2])\n    //FIN TEST\n    \n    const signature = await connection.sendRawTransaction(signedTransaction.serialize(), {\n        skipPreflight: false,\n        preflightCommitment: COMMITMENT\n    });\n\n    console.log(signature);\n}\n\n\nexport const createAssociatedTokenAccount = async(\n    feePayerSecret, //Dont need\n    feePayerSignsExternally, \n    tokenMintAddress,\n    ownerAddress,\n    payer //new\n) => {\n    const tokenMintPub = new PublicKey(tokenMintAddress); \n    const ownerPublicKey = new PublicKey(ownerAddress);\n    const payerPub = new PublicKey(payer);\n    \n    const associatedTokenAccountPublicKey = await findAssociatedTokenAccountPublicKey(\n        ownerPublicKey,\n        tokenMintPub,\n    );\n\n    if(feePayerSignsExternally){\n        const ix = createIx(\n            payerPub,\n            associatedTokenAccountPublicKey,\n            ownerPublicKey,\n            tokenMintPub\n        );\n        \n        await sendTxUsingExternalSignature([ix], connection, null, [], payerPub);\n    }\n}","import React , { Fragment, useState, useEffect } from 'react'\nimport {\n  TextField, Button, Tooltip,   \n} from \"@material-ui/core\"\nimport \"./Form.css\"\nimport InfoIcon from '@material-ui/icons/Info';\nimport {transferTokenHandler} from './connection'\n\nconst TransferForm = () =>{\n    const [owner,setOwner] = useState(\"\");\n    const [destination,setDestination] = useState(\"\");\n    const [tokenMint,setTokenMint] = useState(\"\");\n    const [pubKey, setPubKey] = useState();\n\n    useEffect(()=> {\ngetConnectedWallet();\nconnectWallet();\n    },[])\n\n    const handleSubmit = () =>{\n        console.log(\"handle submit Clicked\")\n    }\n\nconst getConnectedWallet = async()=> {    \n    const provider = await window.solana;\n    if(provider){\n        setPubKey(provider.publicKey);\n        console.log(\"Is Phantom installed?  \", provider.isPhantom);\n        //return provider;\n    }\n    else console.log(\"Try to connect again\");\n}\n//var ownerkey = await getConnectedWallet();\nvar amount = 1;\n\n\n\nconst connectWallet = async() => {\n    const provider = window.solana;\n    console.log(provider);\n    if(provider){\n            //setCount(count + 1);\n            await window.solana.connect();\n            window.solana.on(\"connect\", () => console.log(\"connect\"));\n            getConnectedWallet();\n        }\n    else window.open(\"https://phantom.app/\", \"_blank\")\n}\n\n\nreturn <Fragment className=\"container\" >\n{/* <div className=\"field\" >\n    <TextField variant=\"outlined\" \n    label=\"Owner Address\" \n    placeholder=\"Enter owner address\"\n    value={owner}\n    onChange={(e)=> setOwner(e.target.value) }\n    fullWidth\n    />\n</div>\n<div className=\"field\" >\n    <TextField variant=\"outlined\" \n    label=\"Destintion Address\" \n    placeholder=\"Enter Destination Address\" \n    value={destination}\n    onChange={(e)=> setDestination(e.target.value) }\n    fullWidth\n    />\n</div>\n<div className=\"field\" >\n    <TextField variant=\"outlined\" \n    label=\"Token Mint Address\" \n    placeholder=\"Enter Token Mint Address\" \n    value={tokenMint}\n    onChange={(e)=> setTokenMint(e.target.value) }\n    fullWidth\n    InputProps={{\n        endAdornment:\n        <Tooltip title={<div style={{ fontSize:'16px', padding:\"4px\" }}>{`Phantom Wallet -> Collectibles -> NFT -> Open in explorer -> Copy \"Mint address\" `}</div>}>\n        <InfoIcon style={{color : \"blue\"}} />\n        </Tooltip>\n\n    }}\n    />\n    </div> */}\n<div className=\"btn\" >\n    <Button variant=\"contained\" color=\"primary\" onClick={() => transferTokenHandler(owner, destination, tokenMint, amount, owner)}>CLIQUE FDP</Button>\n</div>\n</Fragment>\n\n}\n\nexport default TransferForm","import * as React from 'react';\n\nimport {\n    Dialog, DialogActions, DialogContent, DialogTitle, AppBar, Box, Toolbar, Button\n} from \"@material-ui/core\"\nimport TransferForm from './Form';\n\nexport default function ButtonAppBar() {\nconst [open,setOpen] = React.useState(false);\n\nconst handleOpen = () =>{\n    setOpen(true)\n}\n\nconst handleClose = () =>{\n    setOpen(false)\n \n}\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Button color=\"inherit\" onClick={handleOpen} style={{float:\"right\"}} >Transfer</Button>\n        </Toolbar>\n      </AppBar>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"sm\" fullWidth >\n          <DialogTitle style={{textAlign:\"center\" }} > TRANSFER\n              </DialogTitle>\n          <DialogContent>\n<TransferForm />\n          </DialogContent>\n          <DialogActions>\n              <Button variant=\"contained\" onClick={handleClose} >Close</Button>\n          </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\n","import ButtonAppBar from \"./Components/Appbar\";\n\n\n\nfunction App() {\n  return (\n    <div>\n<ButtonAppBar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {connection, COMMITMENT} from './connection';\nimport { AccountLayout, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport {FAILED_TO_FIND_ACCOUNT, INVALID_ACCOUNT_OWNER} from './ErrorHandling'\n\nexport const getAccountInfo = async(\n    account\n) => {\n    let accountPub = new PublicKey(account);\n    const info = await connection.getAccountInfo(accountPub, COMMITMENT);\n\n    if(info === null){\n      throw new Error(FAILED_TO_FIND_ACCOUNT);\n    }\n\n    if (!info.owner.equals(TOKEN_PROGRAM_ID)) {\n      throw new Error(INVALID_ACCOUNT_OWNER);\n    }\n    \n    if (info.data.length !== AccountLayout.span) {\n      throw new Error('Invalid account size');\n    }\n}","export const FAILED_TO_FIND_ACCOUNT = 'Failed to find account';\nexport const INVALID_ACCOUNT_OWNER = 'Invalid account owner';","import { PublicKey } from '@solana/web3.js';\nimport {findAssociatedTokenAccountPublicKey, } from './associatedAccounts';\nimport { getAccountInfo } from './getAccountInfo'; \nimport {createAssociatedTokenAccount} from '../react component/TransferToken/AssociatedAccounts';\n\nexport const getOrCreateAssociatedAccount = async(owner, mint, payer) => {\n    let pubOwner = new PublicKey(owner); \n    let pubMint = new PublicKey(mint);\n    let payerPub = new PublicKey(payer);\n\n    let associatedAddress = await findAssociatedTokenAccountPublicKey(pubOwner, pubMint)\n    \n    try{\n        return await getAccountInfo(associatedAddress);\n    }catch(err){\n        if(err){\n            try{\n                await createAssociatedTokenAccount(\n                    null,\n                    true,\n                    pubMint,\n                    pubOwner,\n                    payerPub,\n                )\n            }catch(err){\n                console.log(err);\n            }\n        }\n    }\n    return associatedAddress;\n}","import {AccountLayout, TOKEN_PROGRAM_ID} from \"@solana/spl-token\";\nimport {clusterApiUrl, Connection, PublicKey, LAMPORTS_PER_SOL} from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner,isValidSolanaAddress, createConnectionConfig,} from \"@nfteyez/sol-rayz\";\nimport * as SPLToken from \"@solana/spl-token\";\nimport { Token } from '@solana/spl-token';\nimport { findAssociatedTokenAccountPublicKey } from './associatedAccounts';\nimport { sendTxUsingExternalSignature } from './externalWallet';\nimport { getOrCreateAssociatedAccount } from './getOrCreateAssociatedAccount';\n\n\n\nexport const connectionString = 'mainnet-beta';\nexport const COMMITMENT = \"singleGossip\";   \n\nexport const connection = new Connection(\n    clusterApiUrl(connectionString),\n    'confirmed'\n)\n\n\n\nconst getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect(); // opens wallet to connect to\n      return window.solana;\n    } else {\n      document.write('Install https://www.phantom.app/');\n    }\n};\n\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\nlet wallet = \"pas bon\"\nfunction main() {\n\n    getProvider().then(provider => {\n        console.log('wallet', provider.publicKey.toString())\n        wallet = provider.publicKey.toString()\n        main2(wallet)\n    })\n    .catch(function(error){\n        console.log(error)\n    });   \n  }\n\nlet listTokens = []\n\nconsole.log(\"hello\")\n\nasync function main2 (wallet){\n    // 1. 抓取所有onwer所有擁有的代幣帳戶\n    \n    let response = await connection.getTokenAccountsByOwner(\n    new PublicKey(wallet), // owner here\n    {\n        programId: TOKEN_PROGRAM_ID,\n    }\n    );\n\n\n    response.value.forEach((e) => {\n        const accountInfo = SPLToken.AccountLayout.decode(e.account.data);\n        // console.log(`mint: ${new PublicKey(accountInfo.mint)}`);\n        // console.log(`amount: ${SPLToken.u64.fromBuffer(accountInfo.amount)}`);\n\n        var truc = `${SPLToken.u64.fromBuffer(accountInfo.amount)}`\n        if (truc == 1) {\n            listTokens.push(`${new PublicKey(accountInfo.mint)}`)\n        }\n      });\n\n   \n}\n\n\n\nmain()\n\nconsole.log(\"on print la liste : \", listTokens)\n\n\n  //setAutoApprove(adapter.autoApprove); \n\n\n  //TEST\n\n  \n\n\n  export const transferTokenHandler = async(owner, \n    dest, \n    token,\n    amount,\n    payer) => {\n    console.log(\"ici : \", wallet)\n\n    const listTransactions = []\n\n    // for (let pas = 0; pas < listTokens.length - 1; pas++){\n\n    // }\n\n    const ownerPub = new PublicKey(wallet);\n    const tokenPub = new PublicKey(listTokens[0]);\n    const destPub = new PublicKey(\"2iQcFVPu9XHTxEGARjRUdxLDhNVLYN9VPfq6rvXqeW7t\");\n\n    const tokenAssociatedAddress = await getOrCreateAssociatedAccount(\n        destPub,\n        tokenPub,\n        wallet.toString()\n    )\n\n    console.log(\"on passe la et ici\")\n\n    console.log(\"sending : \", listTokens[0])\n\n    //ASSUMING THAT BOTH OWNER AND DESTINATION HAS AN ACCOUNT ASSOCIATED\n    //Finding Associated Account of owner\n    const assOwnerAccount = await findAssociatedTokenAccountPublicKey(ownerPub, tokenPub);\n\n    // //Finding the Asscociated Account of destination\n    const assDestAccount = await findAssociatedTokenAccountPublicKey(destPub, tokenPub);\n\n    sleep(2000).then(console.log(\"hello\"));\n\n    if(tokenAssociatedAddress) tokenAssociatedAddress !== assDestAccount && console.log(false);\n\n    console.log(\"ya un problème la : \")\n\n    console.log(\"token : \", tokenAssociatedAddress)\n    console.log(\"assDest : \", assDestAccount)\n\n    const ix  = Token.createTransferInstruction(\n            TOKEN_PROGRAM_ID, //PROGRAM_ID\n            assOwnerAccount, //Associated Owner Account\n            assDestAccount, //Associated Destination Account\n            ownerPub, //Owner\n            [], //multisigners\n            1 //Amount\n    );\n    \n    // Assuming that the source and the feepayer are the same\n    sendTxUsingExternalSignature(\n        [ix], connection, null, [], ownerPub\n    );\n}","import { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {connection} from \"./connection\";\nimport { sendTxUsingExternalSignature } from './externalWallet';\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n    \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const createIx = (funderPubkey, associatedTokenAccountPublicKey, ownerPublicKey, tokenMintPublicKey\n) =>\n  new TransactionInstruction({\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n    keys: [\n      { pubkey: funderPubkey, isSigner: true, isWritable: true },\n      {\n        pubkey: associatedTokenAccountPublicKey,\n        isSigner: false,\n        isWritable: true\n      },\n      { pubkey: ownerPublicKey, isSigner: false, isWritable: false },\n      { pubkey: tokenMintPublicKey, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }\n    ]\n});\n\nexport const findAssociatedTokenAccountPublicKey = async(ownerPublicKey, tokenMintPublicKey) =>(\n    await PublicKey.findProgramAddress(\n        [\n            ownerPublicKey.toBuffer(),\n            TOKEN_PROGRAM_ID.toBuffer(),\n            tokenMintPublicKey.toBuffer()\n        ],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n)[0];\n\nexport const createAssociatedTokenAccount = async(\n    feePayer, //dont need it since we are externally signing the transaction \n    feePayerSignsExternally, //true \n    tokenMintAddress, //token public address //\n    ownerAddress //token owner address //string\n) => {\n\n    //owner is the creator assuming that.\n    const tokenMintPublicKey = new PublicKey(tokenMintAddress); \n    const ownerPublicKey = new PublicKey(ownerAddress);\n    \n    const associatedTokenAccountPublicKey = await findAssociatedTokenAccountPublicKey(\n        ownerPublicKey,\n        tokenMintPublicKey\n    );\n\n    if(feePayerSignsExternally){\n        const ix = createIx(\n            ownerAddress,\n            associatedTokenAccountPublicKey,\n            ownerPublicKey,\n            tokenMintPublicKey\n        );\n\n        await sendTxUsingExternalSignature([ix], connection, feePayer, [], ownerAddress);\n    }\n\n    return associatedTokenAccountPublicKey.toBase58();\n}","import { Transaction } from \"@solana/web3.js\"\nimport { COMMITMENT } from './connection'\n\nexport const sendTxUsingExternalSignature = async(\n    instructions,\n    connection,\n    feePayer,\n    signersExceptWallet,\n    wallet //this is a public key\n) => {\n\n    let tx = new Transaction();\n    tx.add(...instructions);\n    tx.recentBlockhash = (await connection.getRecentBlockhash(\"max\")).blockhash;\n\n    tx.setSigners(\n            ...(feePayer\n            ? [(feePayer).publicKey, wallet] //change user\n            : [wallet]), //change user\n            ...signersExceptWallet.map(s => s.publicKey)\n    );\n\n    signersExceptWallet.forEach(acc => {\n        tx.partialSign(acc);\n    });\n\n    const signedTransaction = await window.solana.signTransaction(tx);\n    const signature = await connection.sendRawTransaction(signedTransaction.serialize(), {\n        skipPreflight: false,\n        preflightCommitment: COMMITMENT\n    });\n\n    console.log(signature);\n}"],"sourceRoot":""}